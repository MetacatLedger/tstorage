{

    ;; Contract uses transient storage to pass a message to another contract, then read a response.

	(def "T_INIT_ADDR" 0x00)
	(def "T_MSG_ADDR" 0x20)

	(def "tInit" (TLOAD (ADDRESS) T_INIT_ADDR))
	(def "tMsg" (TLOAD (ADDRESS) T_MSG_ADDR))

	(def "tInitW" (val) (TSTORE T_INIT_ADDR val))
	(def "tMsgW" (val) (TSTORE T_MSG_ADDR val))

	(def "StaticInit" 
	    (unless tInit {
		    (tInitW 0x01)
		    (tMsgW 0x00)
	    })
	)

	StaticInit

	[0x20] (create {
	
		StaticInit

		(returnlll {
		    ;; check tstorage address "T_MSG_ADDR" of (CALLER). If message is the
		    ;; right one, write a response message to the same address in
		    ;; this contracts own tstorage.
			StaticInit
			(when (= (TLOAD (CALLER) T_MSG_ADDR) "Here's ur message.") (tMsgW "Thanks, bro."))
			(return 0)
		})
	})

    ;; write message
	(tMsgW "Here's ur message.")
	;; call other contract
	(msg @0x20 0)
	;; read response message and write to permanent storage address 0x00
	[[0x00]] (TLOAD @0x20 T_MSG_ADDR)
}
