{
    ;; This contract will revert on all calls when the lock is set. This means the
    ;; contract can only be called once per tx execution.
    ;; Languages could use this as a contract modifier and implement lock logic in
    ;; the contract code to enforce this during runtime, for example Solidity could have:
    ;; contract C nonreentrant { ... }
    ;; To be fully locked, the Lock should be added to init/constructor too.

	(def "T_INIT_ADDR" 0x00)
	(def "T_LOCK_ADDR" 0x20)
	(def "T_CTR_ADDR" 0x40)

	(def "tInit" (TLOAD (ADDRESS) T_INIT_ADDR))
	(def "tLock" (TLOAD (ADDRESS) T_LOCK_ADDR))
	(def "tCtr" (TLOAD (ADDRESS) T_CTR_ADDR))

	(def "tInitW" (val) (TSTORE T_INIT_ADDR val))
	(def "tLockW" (TSTORE T_LOCK_ADDR 0x01))
	(def "tCtrIncr" (TSTORE T_CTR_ADDR (+ tCtr 1)))

	(def "StaticInit"
	    (unless tInit {
		    (tInitW 1)
	    })
	)


	(def "ReentrancyLock" {
	    (when tLock (REVERT 0 0))
        tLockW
	})

    StaticInit
    ReentrancyLock

    tCtrIncr ;; increase counter

	(msg (ADDRESS) 0) ;; should fail

	(return tCtr) ;; 1
}
